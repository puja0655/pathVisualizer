{"version":3,"sources":["logo.svg","PathFindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathFindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","x","PathfindingVisualizer","state","mouseIsPressed","text","getInitialGrid","setState","newGrid","getNewGridWithStart","getNewGridWithFinish","getNewGridWithWallToggled","i","setTimeout","animateShortestPath","document","getElementById","console","log","undefined","alert","animateDijkstra","Button","onClick","visualizeDijkstra","color","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4ec95bf6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      >\n        {isStart ? <i className=\"fa fa-phone\"></i> : <div></div>}\n      </div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = []; //array of visited nodes\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); //transforming grid into 2d array or create a copy of grid\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //to get closest node\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder; //we can't reach target and hence return the incomplete path\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\n\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nexport function getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport { bellman } from \"../algorithms/bellmanFord\";\nimport { Button } from \"reactstrap\";\n\nimport \"./PathfindingVisualizer.css\";\n\nlet START_NODE_ROW;\nlet START_NODE_COL;\nlet FINISH_NODE_ROW;\nlet FINISH_NODE_COL;\nvar x = 0;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      text: \"choose starting point\",\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    let newGrid;\n    if (x === 0) {\n      newGrid = getNewGridWithStart(this.state.grid, row, col);\n      START_NODE_ROW = row;\n      START_NODE_COL = col;\n      this.setState({ text: \"choose ending point\" });\n    } else if (x === 1) {\n      newGrid = getNewGridWithFinish(this.state.grid, row, col);\n      FINISH_NODE_ROW = row;\n      FINISH_NODE_COL = col;\n      this.setState({ text: \"Build wall by clicking on cells\" });\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n    x++;\n  }\n  // to handle click and glide\n  handleMouseEnter(row, col) {\n    if (x <= 2) return;\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeBellman() {\n    console.log(\"bellman\");\n    const { grid } = this.state;\n    if (\n      START_NODE_COL === undefined ||\n      START_NODE_ROW === undefined ||\n      FINISH_NODE_ROW === undefined ||\n      FINISH_NODE_COL === undefined\n    ) {\n      alert(\"Select start node and end node\");\n      return;\n    }\n\n    // const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    // const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    //  bellman(grid, startNode, finishNode);\n    //  const visitedNodesInOrder =[]\n    // const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    // this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    if (\n      START_NODE_COL === undefined ||\n      START_NODE_ROW === undefined ||\n      FINISH_NODE_ROW === undefined ||\n      FINISH_NODE_COL === undefined\n    ) {\n      alert(\"Select start node and end node\");\n      return;\n    }\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <br />\n        <br />\n        <br />\n        <Button onClick={() => this.visualizeDijkstra()} color=\"secondary\">\n          Visualize Dijkstra's Algorithm\n        </Button>\n        {/* <Button onClick={()=>this.visualizeBellman()} color=\"primary\">\n           Visualize Bellman Ford's Algorithm\n        </Button> */}\n        <div className=\"m-1 alert alert-success\">\n          <h5>{this.state.text}</h5>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n// grid is an 2d array of objects\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n// returns an object with coordinate row and col\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice(); // as we have to change wall property so new copy of grid is created and returned after change\n  const node = newGrid[row][col]; //return node with wall\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStart = (grid, row, col) => {\n  const newGrid = grid.slice(); // as we have to change wall property so new copy of grid is created and returned after change\n  const node = newGrid[row][col]; //return node with wall\n\n  const newNode = {\n    ...node,\n    isStart: !node.isStart,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col) => {\n  const newGrid = grid.slice(); // as we have to change wall property so new copy of grid is created and returned after change\n  const node = newGrid[row][col]; //return node with wall\n  const newNode = {\n    ...node,\n    isFinish: !node.isFinish,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathFindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}